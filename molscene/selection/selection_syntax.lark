// --------------------------
// Imports & Ignored
// --------------------------
%import common.CNAME
%import common.NUMBER
%import common.ESCAPED_STRING
%import common.WS_INLINE
%ignore WS_INLINE

// Ignore Python-style comments
COMMENT: /#[^\n]*/
%ignore COMMENT

SINGLE_QUOTED_STRING : /'(?:\\.|[^'\\])*'/

// ---------------------------
// LOGICAL OPERATIONS
// ---------------------------

start: expr -> start

// Logical precedence (OR < XOR < AND < NOT)
?expr: or_expr

?or_expr: xor_expr
        | or_expr _OR_OP xor_expr      -> or_

?xor_expr: and_expr
         | xor_expr _XOR_OP and_expr   -> xor_

?and_expr: not_expr
         | and_expr _AND_OP not_expr   -> and_
         | not_expr not_expr   -> and_

?not_expr: _NOT_OP not_expr            -> not_
         | atom

?atom: "(" expr ")"
     | selection

// --------------------------
// Selection Grammar
// --------------------------

?selection: bool_keyword
          | comparison_sel
          | range_or_property_sel
          | regex_sel
          | within_sel
          | bonded_sel
          | sequence_sel
          | same_sel
          | "(" selection ")"

//Range selection
?math_or_number_expr: math_expr | number_expr | STRING_VALUE

comparison_sel: math_or_number_expr (comparison_op math_or_number_expr)+  -> comparison_selection

// Left-factored list-or-range
// ?range_or_property_sel.10: math_expr range_branch                -> range_selection
//                          | math_expr selection_value+            -> property_selection

?range_or_property_sel.10: "(" math_expr ")" range_item+                 -> property_selection 
                         | selection_keyword range_item+                 -> property_selection

?range_item.10: number_range_selection
            | stride_range_selection
            | string_range_selection
            | selection_value

// the three ways to write a numeric range
?number_range_selection: number_expr _TO number_expr     
                       | number_expr _COLON number_expr  

?stride_range_selection: number_expr _COLON number_expr _COLON number_expr
              
?string_range_selection: STRING_VALUE _TO STRING_VALUE

// Regex selection
regex_sel: math_expr _REGEXP_OP ESCAPED_STRING -> regex_selection

// Within selection
?within_sel: whithin_op number_expr _OF expr     -> within_selection

// Bonded selection
?bonded_sel: bonded_op number_expr _TO expr -> bonded_selection

// Sequence selection
sequence_value: /[a-zA-Z]+/
?sequence_sel: _SEQUENCE ESCAPED_STRING -> sequence_selection_regex
             | _SEQUENCE sequence_value -> sequence_selection

// Same selection
same_sel: _SAME selection_keyword _AS expr -> same_selection

?selection_value.-10: ESCAPED_STRING -> escaped_string
                    | SINGLE_QUOTED_STRING -> single_quoted_string
                    | number_expr
                    | STRING_VALUE   -> string_value   

// Property selection
// ?property_single: math_expr number_expr
// property_list.-10: property_single (COMMA? selection_value)+        -> property_list

//───────────────────────────────────────────────────────────────────────────────
// 1) Purely-numeric sub-grammar (no selection_keyword ever):
//───────────────────────────────────────────────────────────────────────────────
?number_expr: num_sum

?num_sum: num_sum _PLUS num_term        -> add
        | num_sum _MINUS num_term       -> sub
        | num_term

?num_term: num_term _TIMES num_factor   -> mul
         | num_term _DIV num_factor     -> truediv
         | num_term _INTEGER_DIV num_factor -> floordiv
         | num_term _MOD num_factor     -> mod
         | num_factor

?num_factor: num_factor _POW num_primary -> pow
           | num_primary

?num_primary: NUMBER               -> number
            | constant                    -> const
            | "-" num_primary             -> neg
            | function_name "(" number_expr ")" -> func
            | "(" number_expr ")"         



//───────────────────────────────────────────────────────────────────────────────
// 2) Mixed “math_expr”: must contain at least one selection_keyword
//───────────────────────────────────────────────────────────────────────────────
?math_expr: math_sum

// After the first token, *any* operator can mix with either sel_operand or pure number_expr:

?math_sum: math_sum _PLUS math_term        -> add
         | math_sum _MINUS math_term       -> sub
         | math_sum _PLUS num_term        -> add
         | math_sum _MINUS num_term       -> sub
         | num_sum _PLUS math_term        -> add
         | num_sum _MINUS math_term       -> sub
         | math_term

?math_term: math_term _TIMES math_factor   -> mul
          | math_term _DIV math_factor     -> truediv
          | math_term _INTEGER_DIV math_factor -> floordiv
          | math_term _MOD math_factor     -> mod
          | math_term _TIMES num_factor   -> mul
          | math_term _DIV num_factor     -> truediv
          | math_term _INTEGER_DIV num_factor -> floordiv
          | math_term _MOD num_factor     -> mod
          | num_term _TIMES math_factor   -> mul
          | num_term _DIV math_factor     -> truediv
          | num_term _INTEGER_DIV math_factor -> floordiv
          | num_term _MOD math_factor     -> mod
          | math_factor

?math_factor: math_factor _POW math_primary -> pow
            | math_factor _POW num_primary  -> pow
            | num_factor _POW math_primary  -> pow
            | math_primary

?math_primary: selection_keyword                   -> selection_keyword
             | "-" math_primary                     -> neg
             | function_name "(" math_expr ")"     -> func
             | "(" math_expr ")"                   

// --------------------------
// Boolean Keywords
// --------------------------

// Universal keywords
ALL        : "all" | "everything"                 
NONE       : "none" | "nothing"                   

?bool_universal: ALL
               | NONE 

// Universal keywords
PROTEIN    : "protein" | "is_protein"
NUCLEIC    : "nucleic" | "is_nucleic"
DNA        : "dna" | "is_dna"
RNA        : "rna" | "is_rna"
WATER      : "water" | "waters" | "is_water"
LIPID      : "lipid" | "lipids"
ION        : "ion" | "ions"
SUGAR      : "sugar"
GLYCAN     : "glycan"
HEME       : "heme"
DRUDE      : "drude"
SOLVENT    : "solvent"

?bool_biomolecule: PROTEIN | NUCLEIC | DNA | RNA | WATER | LIPID | ION | SUGAR | GLYCAN | HEME | DRUDE | SOLVENT

// Residue Type aromaticity
AROMATIC   : "aromatic"
ALIPHATIC  : "aliphatic"

// Residue Type polarity
POLAR      : "polar"
HYDROPHOBIC: "hydrophobic"

// Residue Type charge
CHARGED    : "charged"
ACIDIC     : "acidic"
BASIC      : "basic"
NEUTRAL    : "neutral"

// Residue Type ring structure
ACYCLIC    : "acyclic"
CYCLIC     : "cyclic"

// Residue Type nucleotide size
PURINE     : "purine"
PYRIMIDINE : "pyrimidine"

// Residue Type nucleotide pair
CG         : "cg"
TA         : "ta"

?bool_residue: AROMATIC | ALIPHATIC | POLAR | HYDROPHOBIC | CHARGED | ACIDIC | BASIC | NEUTRAL | ACYCLIC | CYCLIC | PURINE | PYRIMIDINE | CG | TA
// Size / Exposure
SMALL      : "small"
MEDIUM     : "medium"
LARGE      : "large"

?bool_size: SMALL | MEDIUM | LARGE

// Exposure

BURIED     : "buried"
SURFACE    : "surface"
?bool_exposure: BURIED | SURFACE



// Atom Type
CARBON     : "carbon"
HYDROGEN   : "hydrogen"
NITROGEN   : "nitrogen"
OXYGEN     : "oxygen"
SULFUR     : "sulfur"
PHOSPHORUS : "phosphorus"
FLUORINE   : "fluorine"
CHLORINE   : "chlorine"
BROMINE    : "bromine"
IODINE     : "iodine"
METAL      : "metal"
NOH        : "noh"
HEAVY      : "heavy"

?bool_atom: CARBON | HYDROGEN | NITROGEN | OXYGEN | SULFUR | PHOSPHORUS | FLUORINE | CHLORINE | BROMINE | IODINE | METAL | NOH | HEAVY

// Structural Role
CALPHA   : "calpha" | "ca" | "alpha"
BACKBONE   : "backbone" | "is_backbone"
SIDECHAIN  : "sidechain" | "is_sidechain"
// SUGAR      : "sugar" | "is_sugar"
// PHOSPHATE  : "phosphate" | "is_phosphate"
// NUCLEOBASE : "nucleobase" | "is_nucleobase"
// STRUCTURE  : "structure"

?bool_structure: BACKBONE | SIDECHAIN | CALPHA





// Secondary Structure
HELIX          : "helix"
SHEET          : "sheet"
TURN           : "turn"
COIL           : "coil"
ALPHA_HELIX    : "alpha_helix"
PI_HELIX       : "pi_helix"
HELIX310       : "helix_3_10"
EXTENDED_BETA  : "extended_beta"
BRIDGE_BETA    : "bridge_beta"

?bool_secondary: ALPHA_HELIX | PI_HELIX | HELIX | HELIX310 | EXTENDED_BETA | BRIDGE_BETA | SHEET | TURN | COIL

MACRO: "@" CNAME

bool_macro: MACRO -> macro_sel

bool_keyword: bool_universal | bool_biomolecule | bool_residue | bool_atom | bool_structure | bool_size | bool_secondary| bool_macro

// --------------------------
// Tokens
// --------------------------

// Regex match
_REGEXP_OP.1 : "=~"                 

// Not
_NOT_OP    : "not"  | "!"        

// LOGICAL OPERATORS
_OR_OP     : "or"   | "||" | "|"
_AND_OP    : "and"  | "&&" | "&"
_XOR_OP    : "xor"         

?logical_op: _OR_OP | _AND_OP | _XOR_OP | _NOT_OP

// COMPARISON OPERATORS
LE        : "<="   | "le"     
GE        : ">="   | "ge"     
EQ        : "=="   | "=" | "eq" 
LT        : "<"    | "lt"       
GT        : ">"    | "gt"       
NE        : "!="   | "ne"       
?comparison_op: LE | GE | EQ | LT | GT | NE

// RANGE OPERATORS
     
_COLON     : ":"           
COMMA     : ","           
?range_op : _TO | _COLON | COMMA

// COMPARISON TOKENS
_SAME      : "same"
_AS        : "as"
WITHIN    : "within"
EXWITHIN  : "exwithin"
_OF        : "of"
BONDED    : "bonded"
EXBONDED  : "exbonded"
_TO      : "to"    
_SEQUENCE  : "sequence"
?whithin_op: WITHIN | EXWITHIN
?bonded_op : BONDED | EXBONDED

// MATH OPERATORS
_PLUS        : "+"           
_MINUS       : "-"           
_TIMES       : "*"           
_DIV         : "/"           
_INTEGER_DIV : "//"          
_MOD         : "%"           
_POW         : "**" | "^"
?math_op : _PLUS | _MINUS | _TIMES | _DIV | _INTEGER_DIV | _MOD | _POW

?operation_keyword: math_op
                | logical_op
                | comparison_op
                | range_op
                | _REGEXP_OP
                | _NOT_OP


// --------------------------
// Selection Keywords
// --------------------------

// Atom Properties
BETA      : "beta"
OCCUPANCY : "occupancy"
ALTLOC    : "altloc"
MASS      : "mass"
CHARGE    : "charge"
RADIUS    : "radius"
ELEMENT   : "type" | "element" | "symbol"

?select_property: BETA | OCCUPANCY | ALTLOC | MASS | CHARGE | RADIUS | ELEMENT

// Vector Information
X        : "x"
Y        : "y"
Z        : "z"
FX       : "fx"
FY       : "fy"
FZ       : "fz"
VX       : "vx"
VY       : "vy"
VZ       : "vz"

?select_position: X | Y | Z

// --------------------------
// Indexing / Codes / Labels
// --------------------------
CODE     : "code" | "rescode" | "resc"
NAME_KW  : "name"
INDEX_KW : "index"

?select_indexing: CODE | NAME_KW | INDEX_KW

// --------------------------
// Connectivity / Fragmentation
// --------------------------
BONDS    : "bonds" | "numbonds"
FRAGMENT : "fragment"
PFRAG    : "pfrag"
NFRAG    : "nfrag"

?select_fragment: BONDS | FRAGMENT | PFRAG | NFRAG

// --------------------------
// Residue Information
// --------------------------
RESIDUE    : "residue" | "resSeq"
RESNAME    : "resname" | "resn"
RESID      : "resid" | "resi"
CHAINID    : "chainid"
SEGMENT_ID : "segment_id" | "segname"
CONFORMATION : "conformation"

?select_residue: RESIDUE | RESNAME | RESID | CHAINID | SEGMENT_ID | CONFORMATION

VARIABLE  : "$"CNAME

select_variable: VARIABLE -> var_sel

?selection_keyword: select_property
                  | select_position
                  | select_indexing
                  | select_fragment
                  | select_residue
                  | select_variable

// ----------------------------
// MATH KEYWORDS
// ----------------------------

// Math function names (as terminals, so they're easy to recognize)
SIN     : "sin"
COS     : "cos"
TAN     : "tan"
ASIN    : "asin"
ACOS    : "acos"
ATAN    : "atan"
EXP     : "exp"
LOG     : "log"
LOG10   : "log10"
SQRT    : "sqrt"
SQUARE  : "sq"
ABS     : "abs"
FLOOR   : "floor"
CEIL    : "ceil"
COSH    : "cosh"
SINH    : "sinh"
TANH    : "tanh"

?function_name: SIN | COS | TAN | ASIN | ACOS | ATAN | EXP | LOG | LOG10 | SQRT | SQUARE | ABS | CEIL | FLOOR | SINH | COSH | TANH

// --------------------------
// Constants
// --------------------------

PI      : "pi"
E       : "e"

?constant: PI | E

//--------------------------
// Values
// --------------------------


//VALUE.-10: /(?!(to|:)\b)[^\s()]+/       // Last resort for anything not matched by other rules (most greedy)
//VALUE.-10: /(?![-'"()])(?!(?:all|none|protein|nucleic|dna|rna|water|lipid|ion|sugar|glycan|heme|drude|solvent|aromatic|aliphatic|polar|hydrophobic|charged|acidic|basic|neutral|acyclic|cyclic|amino|purine|pyrimidine|hetero|cg|tA|carbon|hydrogen|nitrogen|oxygen|sulfur|phosphorus|fluorine|chlorine|bromine|iodine|metal|noh|heavy|calpha|backbone|sidechain|small|medium|large|buried|surface|helix|sheet|turn|coil|alpha_helix|pi_helix|helix_3_10|extended_beta|bridge_beta|@|=\~|not|or|and|xor|<=|>=|==|<|>|!=|:|,|same|as|within|exwithin|of|bonded|exbonded|to|sequence|\+|\-|\*|\/|\/\/|%|\*\*|beta|occupancy|altloc|mass|charge|radius|type|\$|x|y|z|fx|fy|fz|vx|vy|vz|code|name|index|bonds|fragment|pfrag|nfrag|residue|resname|resid|chainid|segment_id|conformation|sin|cos|tan|asin|acos|atan|exp|log|log10|sqrt|sq|abs)\b)[^()'"\s]+/       // Last resort for anything not matched by other rules (most greedy)
STRING_VALUE.-10: /(?![-'"()])(?!(?:all|everything|none|nothing|protein|is_protein|nucleic|is_nucleic|dna|is_dna|rna|is_rna|water|waters|is_water|lipid|lipids|ion|ions|sugar|glycan|heme|drude|solvent|aromatic|aliphatic|polar|hydrophobic|charged|acidic|basic|neutral|acyclic|cyclic|amino|purine|pyrimidine|hetero|cg|tA|carbon|hydrogen|nitrogen|oxygen|sulfur|phosphorus|fluorine|chlorine|bromine|iodine|metal|noh|heavy|calpha|ca|alpha|backbone|is_backbone|sidechain|is_sidechain|small|medium|large|buried|surface|helix|sheet|turn|coil|alpha_helix|pi_helix|helix_3_10|extended_beta|bridge_beta|@|=\~|not|!|or|\|\||\||and|\&\&|\&|xor|<=|le|>=|ge|==|=|eq|<|lt|>|gt|!=|ne|:|,|same|as|within|exwithin|of|bonded|exbonded|to|sequence|\+|\-|\*|\/|%|\*\*|\^|beta|occupancy|altloc|mass|charge|radius|type|element|symbol|\$|x|y|z|fx|fy|fz|vx|vy|vz|code|rescode|resc|name|index|bonds|numbonds|fragment|pfrag|nfrag|residue|resSeq|resname|resn|resid|resi|chainid|segment_id|segname|conformation|sin|cos|tan|asin|acos|atan|exp|log|log10|sqrt|sq|abs|pi|e)\b)(?!\d+(?:\.\d*)?(?:[eE][+-]?\d+)?\b)(?=[A-Za-z])[^()'"\s]+/   // Last resort for anything not matched by other rules (most greedy)

